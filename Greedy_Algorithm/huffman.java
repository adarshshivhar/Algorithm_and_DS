package huffman;

import java.util.Comparator;
import java.util.PriorityQueue;

class HuffmanNode
{
   char c;
   int freq;
   HuffmanNode left;
   HuffmanNode right;
}
class MyComparator implements Comparator<HuffmanNode>{
	
	public int compare(HuffmanNode ob1,HuffmanNode ob2)
	{
		if(ob1.freq<=ob2.freq)
			return -1;
		else
			return 1;
	}
}
public class compression {
	public static void main(String ar[])
	{
	   // number of characters. 
        int n = 6; 
        char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
        int[] charfreq = { 5, 9, 12, 13, 16, 45 }; 
         
        //make minheap by priority queue
        PriorityQueue<HuffmanNode> q=new PriorityQueue<HuffmanNode>(n, new MyComparator());
        for(int i=0;i<n;i++)
        {
        	HuffmanNode h=new HuffmanNode();
        	h.c=charArray[i];
        	h.freq=charfreq[i];
        	h.left=null;
        	h.right=null;
        	q.add(h);
        	
        }
        HuffmanNode root=null;
        
        while(q.size()>1)
        {
           HuffmanNode x=q.peek();
           q.poll();
           HuffmanNode y=q.peek();
           q.poll();
           HuffmanNode d=new HuffmanNode();
           d.freq=x.freq+y.freq;
           d.left=x;
           d.right=y;
           d.c='-';
           root=d;
           q.add(d);
           
        }
        printAllCodes(root,"");
 
        
	}

	public static void printAllCodes(HuffmanNode root, String s) 
    { 
  
        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.left== null && root.right== null && Character.isLetter(root.c)) { 
  
            // c is the character in the node 
            System.out.println(root.c + ":" + s); 
  
            return; 
        } 
  
        printAllCodes(root.left, s + "0"); 
        printAllCodes(root.right, s + "1"); 
    } 

}
